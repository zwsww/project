package com.neu.po;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class SchedulingExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table scheduling
     *
     * @mbg.generated Thu Oct 15 14:11:44 CST 2020
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table scheduling
     *
     * @mbg.generated Thu Oct 15 14:11:44 CST 2020
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table scheduling
     *
     * @mbg.generated Thu Oct 15 14:11:44 CST 2020
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table scheduling
     *
     * @mbg.generated Thu Oct 15 14:11:44 CST 2020
     */
    public SchedulingExample() {
        oredCriteria = new ArrayList<>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table scheduling
     *
     * @mbg.generated Thu Oct 15 14:11:44 CST 2020
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table scheduling
     *
     * @mbg.generated Thu Oct 15 14:11:44 CST 2020
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table scheduling
     *
     * @mbg.generated Thu Oct 15 14:11:44 CST 2020
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table scheduling
     *
     * @mbg.generated Thu Oct 15 14:11:44 CST 2020
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table scheduling
     *
     * @mbg.generated Thu Oct 15 14:11:44 CST 2020
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table scheduling
     *
     * @mbg.generated Thu Oct 15 14:11:44 CST 2020
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table scheduling
     *
     * @mbg.generated Thu Oct 15 14:11:44 CST 2020
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table scheduling
     *
     * @mbg.generated Thu Oct 15 14:11:44 CST 2020
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table scheduling
     *
     * @mbg.generated Thu Oct 15 14:11:44 CST 2020
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table scheduling
     *
     * @mbg.generated Thu Oct 15 14:11:44 CST 2020
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table scheduling
     *
     * @mbg.generated Thu Oct 15 14:11:44 CST 2020
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andIdIsNull() {
            addCriterion("ID is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("ID is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("ID =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("ID <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("ID >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("ID >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("ID <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("ID <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("ID in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("ID not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("ID between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("ID not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andScheddateIsNull() {
            addCriterion("SchedDate is null");
            return (Criteria) this;
        }

        public Criteria andScheddateIsNotNull() {
            addCriterion("SchedDate is not null");
            return (Criteria) this;
        }

        public Criteria andScheddateEqualTo(Date value) {
            addCriterionForJDBCDate("SchedDate =", value, "scheddate");
            return (Criteria) this;
        }

        public Criteria andScheddateNotEqualTo(Date value) {
            addCriterionForJDBCDate("SchedDate <>", value, "scheddate");
            return (Criteria) this;
        }

        public Criteria andScheddateGreaterThan(Date value) {
            addCriterionForJDBCDate("SchedDate >", value, "scheddate");
            return (Criteria) this;
        }

        public Criteria andScheddateGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("SchedDate >=", value, "scheddate");
            return (Criteria) this;
        }

        public Criteria andScheddateLessThan(Date value) {
            addCriterionForJDBCDate("SchedDate <", value, "scheddate");
            return (Criteria) this;
        }

        public Criteria andScheddateLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("SchedDate <=", value, "scheddate");
            return (Criteria) this;
        }

        public Criteria andScheddateIn(List<Date> values) {
            addCriterionForJDBCDate("SchedDate in", values, "scheddate");
            return (Criteria) this;
        }

        public Criteria andScheddateNotIn(List<Date> values) {
            addCriterionForJDBCDate("SchedDate not in", values, "scheddate");
            return (Criteria) this;
        }

        public Criteria andScheddateBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("SchedDate between", value1, value2, "scheddate");
            return (Criteria) this;
        }

        public Criteria andScheddateNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("SchedDate not between", value1, value2, "scheddate");
            return (Criteria) this;
        }

        public Criteria andDepartMentIsNull() {
            addCriterion("DeptID is null");
            return (Criteria) this;
        }

        public Criteria andDepartMentIsNotNull() {
            addCriterion("DeptID is not null");
            return (Criteria) this;
        }

        public Criteria andDepartMentEqualTo(int value) {
            addCriterion("DeptID =", value, "DepartMent");
            return (Criteria) this;
        }

        public Criteria andDepartMentNotEqualTo(DepartMent value) {
            addCriterion("DeptID <>", value, "DepartMent");
            return (Criteria) this;
        }

        public Criteria andDepartMentGreaterThan(DepartMent value) {
            addCriterion("DeptID >", value, "DepartMent");
            return (Criteria) this;
        }

        public Criteria andDepartMentGreaterThanOrEqualTo(DepartMent value) {
            addCriterion("DeptID >=", value, "DepartMent");
            return (Criteria) this;
        }

        public Criteria andDepartMentLessThan(DepartMent value) {
            addCriterion("DeptID <", value, "DepartMent");
            return (Criteria) this;
        }

        public Criteria andDepartMentLessThanOrEqualTo(DepartMent value) {
            addCriterion("DeptID <=", value, "DepartMent");
            return (Criteria) this;
        }

        public Criteria andDepartMentIn(List<DepartMent> values) {
            addCriterion("DeptID in", values, "DepartMent");
            return (Criteria) this;
        }

        public Criteria andDepartMentNotIn(List<DepartMent> values) {
            addCriterion("DeptID not in", values, "DepartMent");
            return (Criteria) this;
        }

        public Criteria andDepartMentBetween(DepartMent value1, DepartMent value2) {
            addCriterion("DeptID between", value1, value2, "DepartMent");
            return (Criteria) this;
        }

        public Criteria andDepartMentNotBetween(DepartMent value1, DepartMent value2) {
            addCriterion("DeptID not between", value1, value2, "DepartMent");
            return (Criteria) this;
        }

        public Criteria andUserIsNull() {
            addCriterion("UserID is null");
            return (Criteria) this;
        }

        public Criteria andUserIsNotNull() {
            addCriterion("UserID is not null");
            return (Criteria) this;
        }

        public Criteria andUserEqualTo(User value) {
            addCriterion("UserID =", value, "User");
            return (Criteria) this;
        }

        public Criteria andUserNotEqualTo(User value) {
            addCriterion("UserID <>", value, "User");
            return (Criteria) this;
        }

        public Criteria andUserGreaterThan(User value) {
            addCriterion("UserID >", value, "User");
            return (Criteria) this;
        }

        public Criteria andUserGreaterThanOrEqualTo(User value) {
            addCriterion("UserID >=", value, "User");
            return (Criteria) this;
        }

        public Criteria andUserLessThan(User value) {
            addCriterion("UserID <", value, "User");
            return (Criteria) this;
        }

        public Criteria andUserLessThanOrEqualTo(User value) {
            addCriterion("UserID <=", value, "User");
            return (Criteria) this;
        }

        public Criteria andUserIn(List<User> values) {
            addCriterion("UserID in", values, "User");
            return (Criteria) this;
        }

        public Criteria andUserNotIn(List<User> values) {
            addCriterion("UserID not in", values, "User");
            return (Criteria) this;
        }

        public Criteria andUserBetween(User value1, User value2) {
            addCriterion("UserID between", value1, value2, "User");
            return (Criteria) this;
        }

        public Criteria andUserNotBetween(User value1, User value2) {
            addCriterion("UserID not between", value1, value2, "User");
            return (Criteria) this;
        }

        public Criteria andNoonIsNull() {
            addCriterion("Noon is null");
            return (Criteria) this;
        }

        public Criteria andNoonIsNotNull() {
            addCriterion("Noon is not null");
            return (Criteria) this;
        }

        public Criteria andNoonEqualTo(String value) {
            addCriterion("Noon =", value, "noon");
            return (Criteria) this;
        }

        public Criteria andNoonNotEqualTo(String value) {
            addCriterion("Noon <>", value, "noon");
            return (Criteria) this;
        }

        public Criteria andNoonGreaterThan(String value) {
            addCriterion("Noon >", value, "noon");
            return (Criteria) this;
        }

        public Criteria andNoonGreaterThanOrEqualTo(String value) {
            addCriterion("Noon >=", value, "noon");
            return (Criteria) this;
        }

        public Criteria andNoonLessThan(String value) {
            addCriterion("Noon <", value, "noon");
            return (Criteria) this;
        }

        public Criteria andNoonLessThanOrEqualTo(String value) {
            addCriterion("Noon <=", value, "noon");
            return (Criteria) this;
        }

        public Criteria andNoonLike(String value) {
            addCriterion("Noon like", value, "noon");
            return (Criteria) this;
        }

        public Criteria andNoonNotLike(String value) {
            addCriterion("Noon not like", value, "noon");
            return (Criteria) this;
        }

        public Criteria andNoonIn(List<String> values) {
            addCriterion("Noon in", values, "noon");
            return (Criteria) this;
        }

        public Criteria andNoonNotIn(List<String> values) {
            addCriterion("Noon not in", values, "noon");
            return (Criteria) this;
        }

        public Criteria andNoonBetween(String value1, String value2) {
            addCriterion("Noon between", value1, value2, "noon");
            return (Criteria) this;
        }

        public Criteria andNoonNotBetween(String value1, String value2) {
            addCriterion("Noon not between", value1, value2, "noon");
            return (Criteria) this;
        }

        public Criteria andRuleIsNull() {
            addCriterion("RuleID is null");
            return (Criteria) this;
        }

        public Criteria andRuleIsNotNull() {
            addCriterion("RuleID is not null");
            return (Criteria) this;
        }

        public Criteria andRuleEqualTo(Rule value) {
            addCriterion("RuleID =", value, "Rule");
            return (Criteria) this;
        }

        public Criteria andRuleNotEqualTo(Rule value) {
            addCriterion("RuleID <>", value, "Rule");
            return (Criteria) this;
        }

        public Criteria andRuleGreaterThan(Rule value) {
            addCriterion("RuleID >", value, "Rule");
            return (Criteria) this;
        }

        public Criteria andRuleGreaterThanOrEqualTo(Rule value) {
            addCriterion("RuleID >=", value, "Rule");
            return (Criteria) this;
        }

        public Criteria andRuleLessThan(Rule value) {
            addCriterion("RuleID <", value, "Rule");
            return (Criteria) this;
        }

        public Criteria andRuleLessThanOrEqualTo(Rule value) {
            addCriterion("RuleID <=", value, "Rule");
            return (Criteria) this;
        }

        public Criteria andRuleIn(List<Rule> values) {
            addCriterion("RuleID in", values, "Rule");
            return (Criteria) this;
        }

        public Criteria andRuleNotIn(List<Rule> values) {
            addCriterion("RuleID not in", values, "Rule");
            return (Criteria) this;
        }

        public Criteria andRuleBetween(Rule value1, Rule value2) {
            addCriterion("RuleID between", value1, value2, "Rule");
            return (Criteria) this;
        }

        public Criteria andRuleNotBetween(Rule value1, Rule value2) {
            addCriterion("RuleID not between", value1, value2, "Rule");
            return (Criteria) this;
        }

        public Criteria andDelmarkIsNull() {
            addCriterion("DelMark is null");
            return (Criteria) this;
        }

        public Criteria andDelmarkIsNotNull() {
            addCriterion("DelMark is not null");
            return (Criteria) this;
        }

        public Criteria andDelmarkEqualTo(Integer value) {
            addCriterion("DelMark =", value, "delmark");
            return (Criteria) this;
        }

        public Criteria andDelmarkNotEqualTo(Integer value) {
            addCriterion("DelMark <>", value, "delmark");
            return (Criteria) this;
        }

        public Criteria andDelmarkGreaterThan(Integer value) {
            addCriterion("DelMark >", value, "delmark");
            return (Criteria) this;
        }

        public Criteria andDelmarkGreaterThanOrEqualTo(Integer value) {
            addCriterion("DelMark >=", value, "delmark");
            return (Criteria) this;
        }

        public Criteria andDelmarkLessThan(Integer value) {
            addCriterion("DelMark <", value, "delmark");
            return (Criteria) this;
        }

        public Criteria andDelmarkLessThanOrEqualTo(Integer value) {
            addCriterion("DelMark <=", value, "delmark");
            return (Criteria) this;
        }

        public Criteria andDelmarkIn(List<Integer> values) {
            addCriterion("DelMark in", values, "delmark");
            return (Criteria) this;
        }

        public Criteria andDelmarkNotIn(List<Integer> values) {
            addCriterion("DelMark not in", values, "delmark");
            return (Criteria) this;
        }

        public Criteria andDelmarkBetween(Integer value1, Integer value2) {
            addCriterion("DelMark between", value1, value2, "delmark");
            return (Criteria) this;
        }

        public Criteria andDelmarkNotBetween(Integer value1, Integer value2) {
            addCriterion("DelMark not between", value1, value2, "delmark");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table scheduling
     *
     * @mbg.generated do_not_delete_during_merge Thu Oct 15 14:11:44 CST 2020
     */
    public static class Criteria extends GeneratedCriteria {
        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table scheduling
     *
     * @mbg.generated Thu Oct 15 14:11:44 CST 2020
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}